// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.6.1
// source: tracker.proto

package tracker

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// TrackerClient is the client API for Tracker service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TrackerClient interface {
	RegisterNewPackage(ctx context.Context, in *PackageInfo, opts ...grpc.CallOption) (*RegisterResponse, error)
	FindPackageLocation(ctx context.Context, in *LocationRequest, opts ...grpc.CallOption) (Tracker_FindPackageLocationClient, error)
}

type trackerClient struct {
	cc grpc.ClientConnInterface
}

func NewTrackerClient(cc grpc.ClientConnInterface) TrackerClient {
	return &trackerClient{cc}
}

func (c *trackerClient) RegisterNewPackage(ctx context.Context, in *PackageInfo, opts ...grpc.CallOption) (*RegisterResponse, error) {
	out := new(RegisterResponse)
	err := c.cc.Invoke(ctx, "/tracker.Tracker/RegisterNewPackage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *trackerClient) FindPackageLocation(ctx context.Context, in *LocationRequest, opts ...grpc.CallOption) (Tracker_FindPackageLocationClient, error) {
	stream, err := c.cc.NewStream(ctx, &Tracker_ServiceDesc.Streams[0], "/tracker.Tracker/FindPackageLocation", opts...)
	if err != nil {
		return nil, err
	}
	x := &trackerFindPackageLocationClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Tracker_FindPackageLocationClient interface {
	Recv() (*PackageLocation, error)
	grpc.ClientStream
}

type trackerFindPackageLocationClient struct {
	grpc.ClientStream
}

func (x *trackerFindPackageLocationClient) Recv() (*PackageLocation, error) {
	m := new(PackageLocation)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// TrackerServer is the server API for Tracker service.
// All implementations must embed UnimplementedTrackerServer
// for forward compatibility
type TrackerServer interface {
	RegisterNewPackage(context.Context, *PackageInfo) (*RegisterResponse, error)
	FindPackageLocation(*LocationRequest, Tracker_FindPackageLocationServer) error
	mustEmbedUnimplementedTrackerServer()
}

// UnimplementedTrackerServer must be embedded to have forward compatible implementations.
type UnimplementedTrackerServer struct {
}

func (UnimplementedTrackerServer) RegisterNewPackage(context.Context, *PackageInfo) (*RegisterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterNewPackage not implemented")
}
func (UnimplementedTrackerServer) FindPackageLocation(*LocationRequest, Tracker_FindPackageLocationServer) error {
	return status.Errorf(codes.Unimplemented, "method FindPackageLocation not implemented")
}
func (UnimplementedTrackerServer) mustEmbedUnimplementedTrackerServer() {}

// UnsafeTrackerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TrackerServer will
// result in compilation errors.
type UnsafeTrackerServer interface {
	mustEmbedUnimplementedTrackerServer()
}

func RegisterTrackerServer(s grpc.ServiceRegistrar, srv TrackerServer) {
	s.RegisterService(&Tracker_ServiceDesc, srv)
}

func _Tracker_RegisterNewPackage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PackageInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TrackerServer).RegisterNewPackage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tracker.Tracker/RegisterNewPackage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TrackerServer).RegisterNewPackage(ctx, req.(*PackageInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _Tracker_FindPackageLocation_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(LocationRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TrackerServer).FindPackageLocation(m, &trackerFindPackageLocationServer{stream})
}

type Tracker_FindPackageLocationServer interface {
	Send(*PackageLocation) error
	grpc.ServerStream
}

type trackerFindPackageLocationServer struct {
	grpc.ServerStream
}

func (x *trackerFindPackageLocationServer) Send(m *PackageLocation) error {
	return x.ServerStream.SendMsg(m)
}

// Tracker_ServiceDesc is the grpc.ServiceDesc for Tracker service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Tracker_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "tracker.Tracker",
	HandlerType: (*TrackerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RegisterNewPackage",
			Handler:    _Tracker_RegisterNewPackage_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "FindPackageLocation",
			Handler:       _Tracker_FindPackageLocation_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "tracker.proto",
}
