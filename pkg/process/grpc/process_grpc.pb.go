// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.7
// source: process.proto

package grpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ProcessClient is the client API for Process service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ProcessClient interface {
	ImportProcess(ctx context.Context, opts ...grpc.CallOption) (Process_ImportProcessClient, error)
	ImportPackage(ctx context.Context, in *ImportPackageRequest, opts ...grpc.CallOption) (*ImportPackageResponse, error)
	RemoveProcess(ctx context.Context, in *RemoveProcessRequest, opts ...grpc.CallOption) (*RemoveProcessResponse, error)
	DownloadProcess(ctx context.Context, in *DownloadRequest, opts ...grpc.CallOption) (Process_DownloadProcessClient, error)
	DownloadPackage(ctx context.Context, in *DownloadRequest, opts ...grpc.CallOption) (Process_DownloadPackageClient, error)
}

type processClient struct {
	cc grpc.ClientConnInterface
}

func NewProcessClient(cc grpc.ClientConnInterface) ProcessClient {
	return &processClient{cc}
}

func (c *processClient) ImportProcess(ctx context.Context, opts ...grpc.CallOption) (Process_ImportProcessClient, error) {
	stream, err := c.cc.NewStream(ctx, &Process_ServiceDesc.Streams[0], "/grpc.Process/ImportProcess", opts...)
	if err != nil {
		return nil, err
	}
	x := &processImportProcessClient{stream}
	return x, nil
}

type Process_ImportProcessClient interface {
	Send(*ImportProcessRequest) error
	CloseAndRecv() (*ImportProcessResponse, error)
	grpc.ClientStream
}

type processImportProcessClient struct {
	grpc.ClientStream
}

func (x *processImportProcessClient) Send(m *ImportProcessRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *processImportProcessClient) CloseAndRecv() (*ImportProcessResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(ImportProcessResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *processClient) ImportPackage(ctx context.Context, in *ImportPackageRequest, opts ...grpc.CallOption) (*ImportPackageResponse, error) {
	out := new(ImportPackageResponse)
	err := c.cc.Invoke(ctx, "/grpc.Process/ImportPackage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *processClient) RemoveProcess(ctx context.Context, in *RemoveProcessRequest, opts ...grpc.CallOption) (*RemoveProcessResponse, error) {
	out := new(RemoveProcessResponse)
	err := c.cc.Invoke(ctx, "/grpc.Process/RemoveProcess", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *processClient) DownloadProcess(ctx context.Context, in *DownloadRequest, opts ...grpc.CallOption) (Process_DownloadProcessClient, error) {
	stream, err := c.cc.NewStream(ctx, &Process_ServiceDesc.Streams[1], "/grpc.Process/DownloadProcess", opts...)
	if err != nil {
		return nil, err
	}
	x := &processDownloadProcessClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Process_DownloadProcessClient interface {
	Recv() (*DownloadResponse, error)
	grpc.ClientStream
}

type processDownloadProcessClient struct {
	grpc.ClientStream
}

func (x *processDownloadProcessClient) Recv() (*DownloadResponse, error) {
	m := new(DownloadResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *processClient) DownloadPackage(ctx context.Context, in *DownloadRequest, opts ...grpc.CallOption) (Process_DownloadPackageClient, error) {
	stream, err := c.cc.NewStream(ctx, &Process_ServiceDesc.Streams[2], "/grpc.Process/DownloadPackage", opts...)
	if err != nil {
		return nil, err
	}
	x := &processDownloadPackageClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Process_DownloadPackageClient interface {
	Recv() (*DownloadResponse, error)
	grpc.ClientStream
}

type processDownloadPackageClient struct {
	grpc.ClientStream
}

func (x *processDownloadPackageClient) Recv() (*DownloadResponse, error) {
	m := new(DownloadResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ProcessServer is the server API for Process service.
// All implementations must embed UnimplementedProcessServer
// for forward compatibility
type ProcessServer interface {
	ImportProcess(Process_ImportProcessServer) error
	ImportPackage(context.Context, *ImportPackageRequest) (*ImportPackageResponse, error)
	RemoveProcess(context.Context, *RemoveProcessRequest) (*RemoveProcessResponse, error)
	DownloadProcess(*DownloadRequest, Process_DownloadProcessServer) error
	DownloadPackage(*DownloadRequest, Process_DownloadPackageServer) error
	mustEmbedUnimplementedProcessServer()
}

// UnimplementedProcessServer must be embedded to have forward compatible implementations.
type UnimplementedProcessServer struct {
}

func (UnimplementedProcessServer) ImportProcess(Process_ImportProcessServer) error {
	return status.Errorf(codes.Unimplemented, "method ImportProcess not implemented")
}
func (UnimplementedProcessServer) ImportPackage(context.Context, *ImportPackageRequest) (*ImportPackageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ImportPackage not implemented")
}
func (UnimplementedProcessServer) RemoveProcess(context.Context, *RemoveProcessRequest) (*RemoveProcessResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveProcess not implemented")
}
func (UnimplementedProcessServer) DownloadProcess(*DownloadRequest, Process_DownloadProcessServer) error {
	return status.Errorf(codes.Unimplemented, "method DownloadProcess not implemented")
}
func (UnimplementedProcessServer) DownloadPackage(*DownloadRequest, Process_DownloadPackageServer) error {
	return status.Errorf(codes.Unimplemented, "method DownloadPackage not implemented")
}
func (UnimplementedProcessServer) mustEmbedUnimplementedProcessServer() {}

// UnsafeProcessServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ProcessServer will
// result in compilation errors.
type UnsafeProcessServer interface {
	mustEmbedUnimplementedProcessServer()
}

func RegisterProcessServer(s grpc.ServiceRegistrar, srv ProcessServer) {
	s.RegisterService(&Process_ServiceDesc, srv)
}

func _Process_ImportProcess_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ProcessServer).ImportProcess(&processImportProcessServer{stream})
}

type Process_ImportProcessServer interface {
	SendAndClose(*ImportProcessResponse) error
	Recv() (*ImportProcessRequest, error)
	grpc.ServerStream
}

type processImportProcessServer struct {
	grpc.ServerStream
}

func (x *processImportProcessServer) SendAndClose(m *ImportProcessResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *processImportProcessServer) Recv() (*ImportProcessRequest, error) {
	m := new(ImportProcessRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Process_ImportPackage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ImportPackageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProcessServer).ImportPackage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.Process/ImportPackage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProcessServer).ImportPackage(ctx, req.(*ImportPackageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Process_RemoveProcess_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveProcessRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProcessServer).RemoveProcess(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.Process/RemoveProcess",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProcessServer).RemoveProcess(ctx, req.(*RemoveProcessRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Process_DownloadProcess_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(DownloadRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ProcessServer).DownloadProcess(m, &processDownloadProcessServer{stream})
}

type Process_DownloadProcessServer interface {
	Send(*DownloadResponse) error
	grpc.ServerStream
}

type processDownloadProcessServer struct {
	grpc.ServerStream
}

func (x *processDownloadProcessServer) Send(m *DownloadResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _Process_DownloadPackage_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(DownloadRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ProcessServer).DownloadPackage(m, &processDownloadPackageServer{stream})
}

type Process_DownloadPackageServer interface {
	Send(*DownloadResponse) error
	grpc.ServerStream
}

type processDownloadPackageServer struct {
	grpc.ServerStream
}

func (x *processDownloadPackageServer) Send(m *DownloadResponse) error {
	return x.ServerStream.SendMsg(m)
}

// Process_ServiceDesc is the grpc.ServiceDesc for Process service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Process_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "grpc.Process",
	HandlerType: (*ProcessServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ImportPackage",
			Handler:    _Process_ImportPackage_Handler,
		},
		{
			MethodName: "RemoveProcess",
			Handler:    _Process_RemoveProcess_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ImportProcess",
			Handler:       _Process_ImportProcess_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "DownloadProcess",
			Handler:       _Process_DownloadProcess_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "DownloadPackage",
			Handler:       _Process_DownloadPackage_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "process.proto",
}
