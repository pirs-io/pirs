// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.6.1
// source: process.proto

package grpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ProcessClient is the client API for Process service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ProcessClient interface {
	Import(ctx context.Context, opts ...grpc.CallOption) (Process_ImportClient, error)
	Download(ctx context.Context, in *DownloadRequest, opts ...grpc.CallOption) (Process_DownloadClient, error)
}

type processClient struct {
	cc grpc.ClientConnInterface
}

func NewProcessClient(cc grpc.ClientConnInterface) ProcessClient {
	return &processClient{cc}
}

func (c *processClient) Import(ctx context.Context, opts ...grpc.CallOption) (Process_ImportClient, error) {
	stream, err := c.cc.NewStream(ctx, &Process_ServiceDesc.Streams[0], "/grpc.Process/Import", opts...)
	if err != nil {
		return nil, err
	}
	x := &processImportClient{stream}
	return x, nil
}

type Process_ImportClient interface {
	Send(*ImportRequest) error
	CloseAndRecv() (*ImportResponse, error)
	grpc.ClientStream
}

type processImportClient struct {
	grpc.ClientStream
}

func (x *processImportClient) Send(m *ImportRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *processImportClient) CloseAndRecv() (*ImportResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(ImportResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *processClient) Download(ctx context.Context, in *DownloadRequest, opts ...grpc.CallOption) (Process_DownloadClient, error) {
	stream, err := c.cc.NewStream(ctx, &Process_ServiceDesc.Streams[1], "/grpc.Process/Download", opts...)
	if err != nil {
		return nil, err
	}
	x := &processDownloadClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Process_DownloadClient interface {
	Recv() (*DownloadResponse, error)
	grpc.ClientStream
}

type processDownloadClient struct {
	grpc.ClientStream
}

func (x *processDownloadClient) Recv() (*DownloadResponse, error) {
	m := new(DownloadResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ProcessServer is the server API for Process service.
// All implementations must embed UnimplementedProcessServer
// for forward compatibility
type ProcessServer interface {
	Import(Process_ImportServer) error
	Download(*DownloadRequest, Process_DownloadServer) error
	mustEmbedUnimplementedProcessServer()
}

// UnimplementedProcessServer must be embedded to have forward compatible implementations.
type UnimplementedProcessServer struct {
}

func (UnimplementedProcessServer) Import(Process_ImportServer) error {
	return status.Errorf(codes.Unimplemented, "method Import not implemented")
}
func (UnimplementedProcessServer) Download(*DownloadRequest, Process_DownloadServer) error {
	return status.Errorf(codes.Unimplemented, "method Download not implemented")
}
func (UnimplementedProcessServer) mustEmbedUnimplementedProcessServer() {}

// UnsafeProcessServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ProcessServer will
// result in compilation errors.
type UnsafeProcessServer interface {
	mustEmbedUnimplementedProcessServer()
}

func RegisterProcessServer(s grpc.ServiceRegistrar, srv ProcessServer) {
	s.RegisterService(&Process_ServiceDesc, srv)
}

func _Process_Import_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ProcessServer).Import(&processImportServer{stream})
}

type Process_ImportServer interface {
	SendAndClose(*ImportResponse) error
	Recv() (*ImportRequest, error)
	grpc.ServerStream
}

type processImportServer struct {
	grpc.ServerStream
}

func (x *processImportServer) SendAndClose(m *ImportResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *processImportServer) Recv() (*ImportRequest, error) {
	m := new(ImportRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Process_Download_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(DownloadRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ProcessServer).Download(m, &processDownloadServer{stream})
}

type Process_DownloadServer interface {
	Send(*DownloadResponse) error
	grpc.ServerStream
}

type processDownloadServer struct {
	grpc.ServerStream
}

func (x *processDownloadServer) Send(m *DownloadResponse) error {
	return x.ServerStream.SendMsg(m)
}

// Process_ServiceDesc is the grpc.ServiceDesc for Process service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Process_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "grpc.Process",
	HandlerType: (*ProcessServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Import",
			Handler:       _Process_Import_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "Download",
			Handler:       _Process_Download_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "process.proto",
}
