// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.7
// source: dependency-management.proto

package grpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// DependencyManagementClient is the client API for DependencyManagement service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DependencyManagementClient interface {
	Detect(ctx context.Context, opts ...grpc.CallOption) (DependencyManagement_DetectClient, error)
	Resolve(ctx context.Context, opts ...grpc.CallOption) (DependencyManagement_ResolveClient, error)
}

type dependencyManagementClient struct {
	cc grpc.ClientConnInterface
}

func NewDependencyManagementClient(cc grpc.ClientConnInterface) DependencyManagementClient {
	return &dependencyManagementClient{cc}
}

func (c *dependencyManagementClient) Detect(ctx context.Context, opts ...grpc.CallOption) (DependencyManagement_DetectClient, error) {
	stream, err := c.cc.NewStream(ctx, &DependencyManagement_ServiceDesc.Streams[0], "/grpc.DependencyManagement/Detect", opts...)
	if err != nil {
		return nil, err
	}
	x := &dependencyManagementDetectClient{stream}
	return x, nil
}

type DependencyManagement_DetectClient interface {
	Send(*DetectRequest) error
	Recv() (*DetectResponse, error)
	grpc.ClientStream
}

type dependencyManagementDetectClient struct {
	grpc.ClientStream
}

func (x *dependencyManagementDetectClient) Send(m *DetectRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *dependencyManagementDetectClient) Recv() (*DetectResponse, error) {
	m := new(DetectResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *dependencyManagementClient) Resolve(ctx context.Context, opts ...grpc.CallOption) (DependencyManagement_ResolveClient, error) {
	stream, err := c.cc.NewStream(ctx, &DependencyManagement_ServiceDesc.Streams[1], "/grpc.DependencyManagement/Resolve", opts...)
	if err != nil {
		return nil, err
	}
	x := &dependencyManagementResolveClient{stream}
	return x, nil
}

type DependencyManagement_ResolveClient interface {
	Send(*ResolveRequest) error
	Recv() (*ResolveResponse, error)
	grpc.ClientStream
}

type dependencyManagementResolveClient struct {
	grpc.ClientStream
}

func (x *dependencyManagementResolveClient) Send(m *ResolveRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *dependencyManagementResolveClient) Recv() (*ResolveResponse, error) {
	m := new(ResolveResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// DependencyManagementServer is the server API for DependencyManagement service.
// All implementations must embed UnimplementedDependencyManagementServer
// for forward compatibility
type DependencyManagementServer interface {
	Detect(DependencyManagement_DetectServer) error
	Resolve(DependencyManagement_ResolveServer) error
	mustEmbedUnimplementedDependencyManagementServer()
}

// UnimplementedDependencyManagementServer must be embedded to have forward compatible implementations.
type UnimplementedDependencyManagementServer struct {
}

func (UnimplementedDependencyManagementServer) Detect(DependencyManagement_DetectServer) error {
	return status.Errorf(codes.Unimplemented, "method Detect not implemented")
}
func (UnimplementedDependencyManagementServer) Resolve(DependencyManagement_ResolveServer) error {
	return status.Errorf(codes.Unimplemented, "method Resolve not implemented")
}
func (UnimplementedDependencyManagementServer) mustEmbedUnimplementedDependencyManagementServer() {}

// UnsafeDependencyManagementServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DependencyManagementServer will
// result in compilation errors.
type UnsafeDependencyManagementServer interface {
	mustEmbedUnimplementedDependencyManagementServer()
}

func RegisterDependencyManagementServer(s grpc.ServiceRegistrar, srv DependencyManagementServer) {
	s.RegisterService(&DependencyManagement_ServiceDesc, srv)
}

func _DependencyManagement_Detect_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(DependencyManagementServer).Detect(&dependencyManagementDetectServer{stream})
}

type DependencyManagement_DetectServer interface {
	Send(*DetectResponse) error
	Recv() (*DetectRequest, error)
	grpc.ServerStream
}

type dependencyManagementDetectServer struct {
	grpc.ServerStream
}

func (x *dependencyManagementDetectServer) Send(m *DetectResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *dependencyManagementDetectServer) Recv() (*DetectRequest, error) {
	m := new(DetectRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _DependencyManagement_Resolve_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(DependencyManagementServer).Resolve(&dependencyManagementResolveServer{stream})
}

type DependencyManagement_ResolveServer interface {
	Send(*ResolveResponse) error
	Recv() (*ResolveRequest, error)
	grpc.ServerStream
}

type dependencyManagementResolveServer struct {
	grpc.ServerStream
}

func (x *dependencyManagementResolveServer) Send(m *ResolveResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *dependencyManagementResolveServer) Recv() (*ResolveRequest, error) {
	m := new(ResolveRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// DependencyManagement_ServiceDesc is the grpc.ServiceDesc for DependencyManagement service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DependencyManagement_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "grpc.DependencyManagement",
	HandlerType: (*DependencyManagementServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Detect",
			Handler:       _DependencyManagement_Detect_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "Resolve",
			Handler:       _DependencyManagement_Resolve_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "dependency-management.proto",
}
